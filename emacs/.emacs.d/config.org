#+title: Emacs Setup - by d0minikt
* Basic
** Enable lexical binding
#+BEGIN_SRC emacs-lisp
;; -*- coding: utf-8; lexical-binding: t; -*-
#+END_SRC

** Disable default GUI
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Disable blinking cursor
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC
** Not sure what this does
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(setq x-gtk-use-system-tooltips nil)
(setq use-dialog-boxes nil)
#+END_SRC
** Disable startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message "")
#+END_SRC
* User settings
** User details
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Dominik Tarnowski"
      user-mail-address "dom@tdom.dev")
#+END_SRC

** Line mode
#+BEGIN_SRC emacs-lisp
(setq-default display-line-numbers 'relative)
#+END_SRC

** Tab size
   Tabs are used by default in emacs. The following line changes the tab width.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default default-tab-width 2)
#+END_SRC

** Smooth(er) scroll
#+BEGIN_SRC emacs-lisp
;; Vertical
(setq scroll-step 1)
(setq scroll-margin 1)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq auto-window-vscroll nil)
(setq fast-but-imprecise-scrolling nil)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
;; Horizontal
(setq hscroll-step 1)
(setq hscroll-margin 1)
#+END_SRC

** ORG Agenda Folder
Recursively add org files.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
(load-library "find-lisp")
(setq org-agenda-files
      (find-lisp-find-files "org" "\.org$")
    )
#+END_SRC
** Close scratch buffer and open default org file
#+BEGIN_SRC emacs-lisp
;; Makes *scratch* empty.
(setq initial-scratch-message "")

;; Removes *scratch* from buffer after the mode has been set.
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)

;; Removes *messages* from the buffer.
(setq-default message-log-max nil)
(kill-buffer "*Messages*")

;; Removes *Completions* from buffer after you've opened a file.
(add-hook 'minibuffer-exit-hook
      '(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
                (kill-buffer buffer)))))

;; Don't show *Buffer list* when opening multiple files at the same time.
(setq inhibit-startup-buffer-menu t)

;; Show only one active window when opening multiple files at the same time.
(add-hook 'window-setup-hook 'delete-other-windows)
#+END_SRC


* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                         ("gnu"   . "http://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC
* Evil keybindings
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'evil)
  (package-install 'evil)
	(package-install 'evil-collection))
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t) ;; by default, C-u is disabled
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+END_SRC
** Evil collection
#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init 'calendar))
(with-eval-after-load 'calendar (evil-collection-calendar-setup))
#+END_SRC

* Theming
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'atom-one-dark-theme)
  (package-install 'atom-one-dark-theme))
(load-theme 'atom-one-dark t)
(set-frame-font "BlexMono Nerd Font-12")
#+END_SRC

#+RESULTS:

* Start Screen
#+BEGIN_SRC emacs-lisp
(org-agenda nil "a")
#+END_SRC

* ORG Mode
** Custom faces
#+BEGIN_SRC emacs-lisp
	;; (setq org-todo-keyword-faces
	;;   '(("TODO" . org-warning)
	;;     ("DONE" . "#bada55")
	;; 		("EVENT" . "#ba3355")))
#+END_SRC
